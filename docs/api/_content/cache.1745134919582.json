{"generatedAt":1745134958739,"generateTime":415,"contents":[{"_path":"/components","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Components","description":"","navigation":{"title":"index","description":"index"},"body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:components.md","_source":"content","_file":"components.md","_stem":"components","_extension":"md"},{"_path":"/","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"","description":"","navigation":{"title":"home","description":"home"},"body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:index.md","_source":"content","_file":"index.md","_stem":"index","_extension":"md"},{"_path":"/links","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Links","description":"","navigation":{"title":"links","description":"links"},"body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:links.md","_source":"content","_file":"links.md","_stem":"links","_extension":"md"},{"_path":"/posts/20211010","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"nvm 安装","description":"我们一般安装的是最新版本的node,但是有时候，我们又需要使用低版本的node,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的node多版本管理工具nvm，全称是node.js version management,可以在多个node版本之间自由切换！","navigation":{"title":"nvm 安装","description":"我们一般安装的是最新版本的 node ,但是有时候，我们又需要使用低版本的 node ,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的 node 多版本管理工具 nvm ，全称是 node.js version management ,可以在多个 node 版本之间自由切换！","date":"2021-10-10 15:40:30","account":"lpj","tags":["nvm"]},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们一般安装的是最新版本的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":",但是有时候，我们又需要使用低版本的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":",在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"多版本管理工具"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"，全称是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node.js version management"}]},{"type":"text","value":",可以在多个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"版本之间自由切换！"}]},{"type":"element","tag":"h2","props":{"id":"_1安装"},"children":[{"type":"text","value":"1、安装"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"注意：安装之前必须完全卸载已安装的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下载 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm-setup.zip"}]},{"type":"text","value":" 包"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/coreybutler/nvm-windows/releases","rel":["nofollow"]},"children":[{"type":"text","value":"下载地址"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"解压"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".zip"}]},{"type":"text","value":"压缩包，双击"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm-setup.exe"}]},{"type":"text","value":"开始安装，下面两个步骤需要注意："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"安装完成后，在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"CMD"}]},{"type":"text","value":"命令窗口输入"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm -v"}]},{"type":"text","value":",输出如下版本号即证明安装成功"}]},{"type":"element","tag":"pre","props":{"className":["language-sh"],"code":"nvm -v\nRunning version 1.1.8.\n","language":"sh","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nvm -v\nRunning version 1.1.8.\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"yarn add --dev vite-plugin-prismjs\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"yarn add --dev vite-plugin-prismjs\n"}]}]},{"type":"element","tag":"h2","props":{"id":"_3修改nvm配置文件可选"},"children":[{"type":"text","value":"3、修改nvm配置文件（可选）"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"安装完成后，打开"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"安装目录下的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"settings.txt"}]},{"type":"text","value":"文件:"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"root: C:\\Users\\Lenovo\\AppData\\Roaming\\nvm // 安装目录\npath: C:\\nodejs // Program Files\\nodejs 不能使用带空格的文件目录\narch: 64 \nproxy: none\nnode_mirror: http://npm.taobao.org/mirrors/node/\nnpm_mirror: https://npm.taobao.org/mirrors/npm/\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"root: C:\\Users\\Lenovo\\AppData\\Roaming\\nvm // 安装目录\npath: C:\\nodejs // Program Files\\nodejs 不能使用带空格的文件目录\narch: 64 \nproxy: none\nnode_mirror: http://npm.taobao.org/mirrors/node/\nnpm_mirror: https://npm.taobao.org/mirrors/npm/\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"root"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"path"}]},{"type":"text","value":"分别是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"的安装路径，这两个不要动，这是之前安装时根据你选择的路径自动生成的，这个配置文件默认也只有这两项。因为我没改配置文件，所以后面的4项我都没有，只是后来搜到了，就说一下，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"arch"}]},{"type":"text","value":"表示安装的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"是多少位，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"proxy"}]},{"type":"text","value":"是设置代理，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node_mirror"}]},{"type":"text","value":"是更改"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"下载"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"时的镜像，这里是设置为淘宝镜像，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"npm_mirror"}]},{"type":"text","value":"是更改"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"npm"}]},{"type":"text","value":"下载依赖包的镜像，也是修改为了淘宝镜像。"}]},{"type":"element","tag":"h2","props":{"id":"_4安装node版本"},"children":[{"type":"text","value":"4、安装node版本"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm list available"}]},{"type":"text","value":"查看"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"支持安装的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"版本"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"$ nvm list available\n\n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\n|--------------|--------------|--------------|--------------|\n|   16.11.0    |   14.18.0    |   0.12.18    |   0.11.16    |\n|   16.10.0    |   14.17.6    |   0.12.17    |   0.11.15    |\n|    16.9.1    |   14.17.5    |   0.12.16    |   0.11.14    |\n|    16.9.0    |   14.17.4    |   0.12.15    |   0.11.13    |\n|    16.8.0    |   14.17.3    |   0.12.14    |   0.11.12    |\n|    16.7.0    |   14.17.2    |   0.12.13    |   0.11.11    |\n|    16.6.2    |   14.17.1    |   0.12.12    |   0.11.10    |\n...\n\nThis is a partial list. For a complete list, visit https://nodejs.org/download/releases\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ nvm list available\n\n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\n|--------------|--------------|--------------|--------------|\n|   16.11.0    |   14.18.0    |   0.12.18    |   0.11.16    |\n|   16.10.0    |   14.17.6    |   0.12.17    |   0.11.15    |\n|    16.9.1    |   14.17.5    |   0.12.16    |   0.11.14    |\n|    16.9.0    |   14.17.4    |   0.12.15    |   0.11.13    |\n|    16.8.0    |   14.17.3    |   0.12.14    |   0.11.12    |\n|    16.7.0    |   14.17.2    |   0.12.13    |   0.11.11    |\n|    16.6.2    |   14.17.1    |   0.12.12    |   0.11.10    |\n...\n\nThis is a partial list. For a complete list, visit https://nodejs.org/download/releases\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm install 版本号"}]},{"type":"text","value":"安装指定版本"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]}]},{"type":"element","tag":"pre","props":{"className":["language-cmd"],"code":"nvm install 10.15.0\n","language":"cmd","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nvm install 10.15.0\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这里同时安装了"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"npm"}]},{"type":"text","value":",因为我没修改下载镜像，所以速度很慢，如果介意可以修改下载镜像为淘宝镜像"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"检测"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"npm"}]},{"type":"text","value":"是否安装成功,如下显示则为成功："}]},{"type":"element","tag":"pre","props":{"className":["language-cmd"],"code":"node -v\nv10.15.0\n","language":"cmd","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"node -v\nv10.15.0\n"}]}]},{"type":"element","tag":"pre","props":{"className":["language-cmd"],"code":"npm -v\n6.4.1\n","language":"cmd","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm -v\n6.4.1\n"}]}]},{"type":"element","tag":"h2","props":{"id":"_5切换node版本"},"children":[{"type":"text","value":"5、切换node版本"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"注意：打开"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cmd"}]},{"type":"text","value":"时需要使用“"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"以管理员身份运行"}]},{"type":"text","value":"”"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"初次使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm"}]},{"type":"text","value":"安装"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"之后，必须先使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nvm use 版本号"}]},{"type":"text","value":"切换到已安装版本的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"node"}]},{"type":"text","value":"才可以"}]},{"type":"element","tag":"pre","props":{"className":["language-cmd"],"code":"$ nvm use 12.18.3\nNow using node v12.18.3 (64-bit)\n","language":"cmd","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ nvm use 12.18.3\nNow using node v12.18.3 (64-bit)\n"}]}]},{"type":"element","tag":"h2","props":{"id":"_6nvm-常用指令"},"children":[{"type":"text","value":"6、nvm 常用指令"}]},{"type":"element","tag":"pre","props":{"className":["language-cmd"],"code":"nvm off                     //禁用node.js版本管理(不卸载任何东西)\nnvm on                      //启用node.js版本管理\nnvm install <version>       //安装指定版本node,例如nvm install 12.18.3\nnvm uninstall <version>     //卸载指定版本node,例如nvm uninstall 12.18.3 \nnvm list                    //显示所有安装的node.js版本\nnvm list available          //显示可以安装的所有node.js的版本(windows系统)\nnvm use <version>           //切换到使用指定的nodejs版本，例如nvm use 12.18.3\n","language":"cmd","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"nvm off                     //禁用node.js版本管理(不卸载任何东西)\nnvm on                      //启用node.js版本管理\nnvm install <version>       //安装指定版本node,例如nvm install 12.18.3\nnvm uninstall <version>     //卸载指定版本node,例如nvm uninstall 12.18.3 \nnvm list                    //显示所有安装的node.js版本\nnvm list available          //显示可以安装的所有node.js的版本(windows系统)\nnvm use <version>           //切换到使用指定的nodejs版本，例如nvm use 12.18.3\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"_1安装","depth":2,"text":"1、安装"},{"id":"_3修改nvm配置文件可选","depth":2,"text":"3、修改nvm配置文件（可选）"},{"id":"_4安装node版本","depth":2,"text":"4、安装node版本"},{"id":"_5切换node版本","depth":2,"text":"5、切换node版本"},{"id":"_6nvm-常用指令","depth":2,"text":"6、nvm 常用指令"}]}},"_type":"markdown","_id":"content:posts:20211010.md","_source":"content","_file":"posts/20211010.md","_stem":"posts/20211010","_extension":"md"},{"_path":"/posts/20211028","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"前端微服务-qiankun安装与配置","description":"","navigation":{"title":"前端微服务-qiankun安装与配置","description":"qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。","date":"2021-10-28 10:20:00","account":"lpj","tags":["前端微服务","乾坤"]},"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"介绍"},"children":[{"type":"text","value":"介绍"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"qiankun 是一个基于 "},{"type":"element","tag":"a","props":{"href":"https://github.com/CanopyTax/single-spa","rel":["nofollow"]},"children":[{"type":"text","value":"single-spa"}]},{"type":"text","value":" 的"},{"type":"element","tag":"a","props":{"href":"https://micro-frontends.org/","rel":["nofollow"]},"children":[{"type":"text","value":"微前端实"}]},{"type":"text","value":"现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"目前 qiankun 已在蚂蚁内部服务了超过 200+ 线上应用，在易用性及完备性上，绝对是值得信赖的。"}]},{"type":"element","tag":"h2","props":{"id":"_1主应用"},"children":[{"type":"text","value":"1、主应用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"主应用不限技术栈，只需要提供一个容器 DOM，然后注册微应用并 start 即可。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"先安装 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"qiankun"}]},{"type":"text","value":" ："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"$ yarn add qiankun # 或者 npm i qiankun -S\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"$ yarn add qiankun # 或者 npm i qiankun -S\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_11注册微应用并启动"},"children":[{"type":"text","value":"1.1、注册微应用并启动："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"import { registerMicroApps, start } from 'qiankun';\n\nregisterMicroApps([\n  {\n    name: 'reactApp',\n    entry: '//localhost:3000',\n    container: '#container',\n    activeRule: '/app-react',\n  },\n  {\n    name: 'vueApp',\n    entry: '//localhost:8080',\n    container: '#container',\n    activeRule: '/app-vue',\n  },\n  {\n    name: 'angularApp',\n    entry: '//localhost:4200',\n    container: '#container',\n    activeRule: '/app-angular',\n  },\n]);\n// 启动 qiankun\nstart();\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { registerMicroApps, start } from 'qiankun';\n\nregisterMicroApps([\n  {\n    name: 'reactApp',\n    entry: '//localhost:3000',\n    container: '#container',\n    activeRule: '/app-react',\n  },\n  {\n    name: 'vueApp',\n    entry: '//localhost:8080',\n    container: '#container',\n    activeRule: '/app-vue',\n  },\n  {\n    name: 'angularApp',\n    entry: '//localhost:4200',\n    container: '#container',\n    activeRule: '/app-angular',\n  },\n]);\n// 启动 qiankun\nstart();\n"}]}]},{"type":"element","tag":"h2","props":{"id":"_2vue-微应用"},"children":[{"type":"text","value":"2、Vue 微应用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vue-cli 3+"}]},{"type":"text","value":" 生成的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vue 2.x"}]},{"type":"text","value":" 项目为例"}]},{"type":"element","tag":"h3","props":{"id":"_21在-src-目录新增-public-pathjs"},"children":[{"type":"text","value":"2.1、在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"src"}]},{"type":"text","value":" 目录新增 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"public-path.js"}]},{"type":"text","value":"："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"if (window.__POWERED_BY_QIANKUN__) {\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if (window.__POWERED_BY_QIANKUN__) {\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_22入口文件-mainjs-修改为了避免根-id-app-与其他的-dom-冲突需要限制查找范围"},"children":[{"type":"text","value":"2.2、入口文件 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main.js"}]},{"type":"text","value":" 修改，为了避免根 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"id #app"}]},{"type":"text","value":" 与其他的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DOM"}]},{"type":"text","value":" 冲突，需要限制查找范围。"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// new Vue({\n//   router,\n//   store,\n//   render: h => h(App)\n// }).$mount('#app')\n\n// 乾坤配置方法\nlet instance = null\nfunction render( props = {}) {\n    const { container } = props\n    instance = new Vue({\n        router,\n        store,\n        render: h => h(App),\n    }).$mount(container ? container.querySelector('#app'): '#app')\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n    render()\n}\n\n//--------- 生命周期函数------------//\nexport async function bootstrap() {\n    console.log('[qiankun] vue app bootstraped')\n}\nexport async function mount(props) {\n    console.log('[qiankun] props from main framework', props)\n    render(props)\n}\nexport async function unmount() {\n    instance.$destroy()\n    instance.$el.innerHTML = ''\n    instance = null\n}\n\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// new Vue({\n//   router,\n//   store,\n//   render: h => h(App)\n// }).$mount('#app')\n\n// 乾坤配置方法\nlet instance = null\nfunction render( props = {}) {\n    const { container } = props\n    instance = new Vue({\n        router,\n        store,\n        render: h => h(App),\n    }).$mount(container ? container.querySelector('#app'): '#app')\n}\n\nif (!window.__POWERED_BY_QIANKUN__) {\n    render()\n}\n\n//--------- 生命周期函数------------//\nexport async function bootstrap() {\n    console.log('[qiankun] vue app bootstraped')\n}\nexport async function mount(props) {\n    console.log('[qiankun] props from main framework', props)\n    render(props)\n}\nexport async function unmount() {\n    instance.$destroy()\n    instance.$el.innerHTML = ''\n    instance = null\n}\n\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_23配置-vueconfigjs"},"children":[{"type":"text","value":"2.3、配置 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vue.config.js"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在子项目内修改 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"vue.config.js"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const path = require('path');\nconst { name } = require('./package');\n\nfunction resolve(dir) {\n    return path.join(__dirname, dir);\n}\n\nconst port = 8092; // dev port\n\nmodule.exports = {\n  /**\n   * You will need to set publicPath if you plan to deploy your site under a sub path,\n   * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,\n   * then publicPath should be set to \"/bar/\".\n   * In most cases please use '/' !!!\n   * Detail: https://cli.vuejs.org/config/#publicpath\n   */\n    // 基本路径\n    publicPath: process.env.publicPath != null && process.env.publicPath != '' ? process.env.publicPath : '/',\n    outputDir: process.env.outputDir != null && process.env.outputDir != '' ? process.env.outputDir : 'dist',\n    filenameHashing: true,\n    // tweak internal webpack configuration.\n    // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n    devServer: {\n        // host: '0.0.0.0',\n        hot: true,\n        disableHostCheck: true,\n        port,\n        // overlay: {\n        //     warnings: false,\n        //     errors: true,\n        // },\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n        },\n    },\n    // 自定义webpack配置\n    configureWebpack: {\n        resolve: {\n            alias: {\n                // '@': window.__POWERED_BY_QIANKUN__? resolve('/naroticControl/src'): resolve('/src'),\n                '@': resolve('/src'),\n            },\n        },\n        output: {\n            // 把子应用打包成 umd 库格式\n            library: `${name}-[name]`,\n            libraryTarget: 'umd',\n            jsonpFunction: `webpackJsonp_${name}`,\n        },\n    },\n};\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const path = require('path');\nconst { name } = require('./package');\n\nfunction resolve(dir) {\n    return path.join(__dirname, dir);\n}\n\nconst port = 8092; // dev port\n\nmodule.exports = {\n  /**\n   * You will need to set publicPath if you plan to deploy your site under a sub path,\n   * for example GitHub Pages. If you plan to deploy your site to https://foo.github.io/bar/,\n   * then publicPath should be set to \"/bar/\".\n   * In most cases please use '/' !!!\n   * Detail: https://cli.vuejs.org/config/#publicpath\n   */\n    // 基本路径\n    publicPath: process.env.publicPath != null && process.env.publicPath != '' ? process.env.publicPath : '/',\n    outputDir: process.env.outputDir != null && process.env.outputDir != '' ? process.env.outputDir : 'dist',\n    filenameHashing: true,\n    // tweak internal webpack configuration.\n    // see https://github.com/vuejs/vue-cli/blob/dev/docs/webpack.md\n    devServer: {\n        // host: '0.0.0.0',\n        hot: true,\n        disableHostCheck: true,\n        port,\n        // overlay: {\n        //     warnings: false,\n        //     errors: true,\n        // },\n        headers: {\n            'Access-Control-Allow-Origin': '*',\n        },\n    },\n    // 自定义webpack配置\n    configureWebpack: {\n        resolve: {\n            alias: {\n                // '@': window.__POWERED_BY_QIANKUN__? resolve('/naroticControl/src'): resolve('/src'),\n                '@': resolve('/src'),\n            },\n        },\n        output: {\n            // 把子应用打包成 umd 库格式\n            library: `${name}-[name]`,\n            libraryTarget: 'umd',\n            jsonpFunction: `webpackJsonp_${name}`,\n        },\n    },\n};\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_24配置子项目的-router"},"children":[{"type":"text","value":"2.4、配置子项目的 router"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"修改输出的目录，需要和主应用的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"activeRule"}]},{"type":"text","value":" 一致"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const router = new VueRouter({\n    mode: 'history',\n    base: window.__POWERED_BY_QIANKUN__? '/app-vue/': process.env.BASE_URL,\n    routes\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const router = new VueRouter({\n    mode: 'history',\n    base: window.__POWERED_BY_QIANKUN__? '/app-vue/': process.env.BASE_URL,\n    routes\n})\n"}]}]},{"type":"element","tag":"h2","props":{"id":"为什么不是-iframe"},"children":[{"type":"text","value":"为什么不是 iframe"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"看这里 "},{"type":"element","tag":"a","props":{"href":"https://www.yuque.com/kuitos/gky7yw/gesexv","rel":["nofollow"]},"children":[{"type":"text","value":"Why Not Iframe"}]}]},{"type":"element","tag":"h2","props":{"id":"特性"},"children":[{"type":"text","value":"特性"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"📦 基于 "},{"type":"element","tag":"a","props":{"href":"https://github.com/CanopyTax/single-spa","rel":["nofollow"]},"children":[{"type":"text","value":"single-spa"}]},{"type":"text","value":" 封装，提供了更加开箱即用的 API。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"📱 技术栈无关，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"💪 HTML Entry 接入方式，让你接入微应用像使用 iframe 一样简单。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"🛡​ 样式隔离，确保微应用之间样式互相不干扰。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"🧳 JS 沙箱，确保微应用之间 全局变量/事件 不冲突。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"⚡️ 资源预加载，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"🔌 umi 插件，提供了 "},{"type":"element","tag":"a","props":{"href":"https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun","rel":["nofollow"]},"children":[{"type":"text","value":"@umijs/plugin-qiankun"}]},{"type":"text","value":" 供 umi 应用一键切换成微前端架构系统。"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"介绍","depth":2,"text":"介绍"},{"id":"_1主应用","depth":2,"text":"1、主应用","children":[{"id":"_11注册微应用并启动","depth":3,"text":"1.1、注册微应用并启动："}]},{"id":"_2vue-微应用","depth":2,"text":"2、Vue 微应用","children":[{"id":"_21在-src-目录新增-public-pathjs","depth":3,"text":"2.1、在 src 目录新增 public-path.js："},{"id":"_22入口文件-mainjs-修改为了避免根-id-app-与其他的-dom-冲突需要限制查找范围","depth":3,"text":"2.2、入口文件 main.js 修改，为了避免根 id #app 与其他的 DOM 冲突，需要限制查找范围。"},{"id":"_23配置-vueconfigjs","depth":3,"text":"2.3、配置 vue.config.js"},{"id":"_24配置子项目的-router","depth":3,"text":"2.4、配置子项目的 router"}]},{"id":"为什么不是-iframe","depth":2,"text":"为什么不是 iframe"},{"id":"特性","depth":2,"text":"特性"}]}},"_type":"markdown","_id":"content:posts:20211028.md","_source":"content","_file":"posts/20211028.md","_stem":"posts/20211028","_extension":"md"},{"_path":"/posts/20211105","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"前端微服务 - ifram 解决方案","description":"","navigation":{"title":"前端微服务 - ifram 解决方案","description":"我们一般安装的是最新版本的 node ,但是有时候，我们又需要使用低版本的 node ,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的 node 多版本管理工具 nvm ，全称是 node.js version management ,可以在多个 node 版本之间自由切换！","date":"2021-10-28 10:20:00","account":"lpj","tags":["前端微服务","iframe"]},"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"介绍"},"children":[{"type":"text","value":"介绍"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"作为 html 提供 iframe 也可以作为前端微服务的解决方案，也是最简单的方案之一。配置过程中只需要通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"window.addEventListener('message', fn(), false)"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"postMessage"}]},{"type":"text","value":" 两个方法，使父级子级进行数据通讯，从而达到数据共享的功能。"}]},{"type":"element","tag":"h2","props":{"id":"_1主项目配置"},"children":[{"type":"text","value":"1、主项目配置"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"views/projects"}]},{"type":"text","value":" 目录下新建一个 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".vue"}]},{"type":"text","value":" 文件，代码如下："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"<template>\n  <div v-loading=\"showLading\"\n    element-loading-text=\"子项目模块加载中\">\n    <iframe\n      ref=\"monitor\"\n      width=\"100%\" height=\"100%\"\n      v-if=\"src\"\n      @load=\"postMsg\"\n      :src=\"src\">\n    </iframe>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'microApp',\n  components: {\n  },\n  data() {\n    return {\n      showLading: true,\n      src: ''\n    }\n  },\n  created() {\n    // microApps 为全局引入\n    this.src = microApps.microApp\n  },\n  mounted() {\n    // 监听 iframe 上传信息\n    window.addEventListener('message', this.getMsg, false)\n  },\n  methods: {\n    // 下传数据\n    postMsg() {\n      this.showLading = false\n      let _placeInfo = JSON.parse(sessionStorage.getItem('placeInfo'))\n      this.$refs.monitor.contentWindow.postMessage({\n        placeInfo: _placeInfo,\n        axiosurls\n      }, this.src)\n    },\n    // 获取消息\n    getMsg (event) {\n      let eventData = event.data\n      console.log('iframe 基站接收到的消息：', eventData)\n      // todo something\n    }\n  },\n  beforeDestroy() {\n    // 清除监听事件\n    window.removeEventListener('message', this.getMsg, false)\n  }\n}\n</script>\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n</style>\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div v-loading=\"showLading\"\n    element-loading-text=\"子项目模块加载中\">\n    <iframe\n      ref=\"monitor\"\n      width=\"100%\" height=\"100%\"\n      v-if=\"src\"\n      @load=\"postMsg\"\n      :src=\"src\">\n    </iframe>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'microApp',\n  components: {\n  },\n  data() {\n    return {\n      showLading: true,\n      src: ''\n    }\n  },\n  created() {\n    // microApps 为全局引入\n    this.src = microApps.microApp\n  },\n  mounted() {\n    // 监听 iframe 上传信息\n    window.addEventListener('message', this.getMsg, false)\n  },\n  methods: {\n    // 下传数据\n    postMsg() {\n      this.showLading = false\n      let _placeInfo = JSON.parse(sessionStorage.getItem('placeInfo'))\n      this.$refs.monitor.contentWindow.postMessage({\n        placeInfo: _placeInfo,\n        axiosurls\n      }, this.src)\n    },\n    // 获取消息\n    getMsg (event) {\n      let eventData = event.data\n      console.log('iframe 基站接收到的消息：', eventData)\n      // todo something\n    }\n  },\n  beforeDestroy() {\n    // 清除监听事件\n    window.removeEventListener('message', this.getMsg, false)\n  }\n}\n</script>\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n</style>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"_2子项目修改"},"children":[{"type":"text","value":"2、子项目修改"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"接下来只需要在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"app.vue"}]},{"type":"text","value":" 通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"window.addEventListener('message', this.receiveMsg, true)"}]},{"type":"text","value":" 方法监听到父级下传的信息，接收到信息后可以对信息进行保存或修改。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如获取到登录信息后，对登录信息进行保存，就可以实现登录共享了。"}]},{"type":"element","tag":"h3","props":{"id":"_21判断是否是套用-iframe"},"children":[{"type":"text","value":"2.1、判断是否是套用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"iframe"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"if(window.top === window.self) {\n    console.log('不在iframe中')\n} else {\n    console.log('在iframe中')\n    // 可以标识一下是从 iframe 引入的\n    this.IFRAME_INFO.IS_IFRAME = true\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"if(window.top === window.self) {\n    console.log('不在iframe中')\n} else {\n    console.log('在iframe中')\n    // 可以标识一下是从 iframe 引入的\n    this.IFRAME_INFO.IS_IFRAME = true\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_22监听消息获取"},"children":[{"type":"text","value":"2.2、监听消息获取"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在生命周期的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mounted()"}]},{"type":"text","value":" 添加监听代码"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// 从父级获取缓存\nthis.$nextTick(() => {\n    window.addEventListener('message', this.receiveMsg, true)\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 从父级获取缓存\nthis.$nextTick(() => {\n    window.addEventListener('message', this.receiveMsg, true)\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"methods:"}]},{"type":"text","value":" 添加获取方法的函数"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"receiveMsg(event) {\n    // todo something\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"receiveMsg(event) {\n    // todo something\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_23向父级项目上传消息"},"children":[{"type":"text","value":"2.3、向父级项目上传消息"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果当遇到子项目退出登录信息时，需要将已登录的信息通知到父级项目，从而使父级项目也退出登录信息。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"首先先拿到 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"iframe"}]},{"type":"text","value":" 的来源 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"source"}]},{"type":"text","value":" 和 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"url"}]},{"type":"text","value":" 的值 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"origin"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"receiveMsg(event) {\n    if(event.data.placeInfo) {\n        // 暂存 iframe 的来源\n        this.IFRAME_INFO.TRAGET = event.source\n        // 暂存 iframe 的url地址\n        this.IFRAME_INFO.ORIGIN = event.origin\n    }\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"receiveMsg(event) {\n    if(event.data.placeInfo) {\n        // 暂存 iframe 的来源\n        this.IFRAME_INFO.TRAGET = event.source\n        // 暂存 iframe 的url地址\n        this.IFRAME_INFO.ORIGIN = event.origin\n    }\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"postMessage"}]},{"type":"text","value":" 上传数据状态"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// 如果是从iframe引入，需要往上传数据状态\nif (this.IFRAME_INFO.IS_IFRAME) {\n    this.IFRAME_INFO.TRAGET.postMessage({placeInfo: ''}, this.IFRAME_INFO.ORIGIN)\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 如果是从iframe引入，需要往上传数据状态\nif (this.IFRAME_INFO.IS_IFRAME) {\n    this.IFRAME_INFO.TRAGET.postMessage({placeInfo: ''}, this.IFRAME_INFO.ORIGIN)\n}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_24向父级项目接收子级项目上传消息"},"children":[{"type":"text","value":"2.4、向父级项目接收子级项目上传消息"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在父级项目下对应 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".vue"}]},{"type":"text","value":" 页面的 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"mounted()"}]},{"type":"text","value":" 去监听上传消息"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// 监听 iframe 上传消息\nwindow.addEventListener('message', this.getMsg, false)\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 监听 iframe 上传消息\nwindow.addEventListener('message', this.getMsg, false)\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"methods:"}]},{"type":"text","value":" 添加接收消息的函数"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// 获取消息\ngetMsg (event) {\n    let eventData = event.data\n    console.log('iframe 基站接收到的消息：', eventData)\n    // todo something\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 获取消息\ngetMsg (event) {\n    let eventData = event.data\n    console.log('iframe 基站接收到的消息：', eventData)\n    // todo something\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"介绍","depth":2,"text":"介绍"},{"id":"_1主项目配置","depth":2,"text":"1、主项目配置"},{"id":"_2子项目修改","depth":2,"text":"2、子项目修改","children":[{"id":"_21判断是否是套用-iframe","depth":3,"text":"2.1、判断是否是套用 iframe"},{"id":"_22监听消息获取","depth":3,"text":"2.2、监听消息获取"},{"id":"_23向父级项目上传消息","depth":3,"text":"2.3、向父级项目上传消息"},{"id":"_24向父级项目接收子级项目上传消息","depth":3,"text":"2.4、向父级项目接收子级项目上传消息"}]}]}},"_type":"markdown","_id":"content:posts:20211105.md","_source":"content","_file":"posts/20211105.md","_stem":"posts/20211105","_extension":"md"},{"_path":"/posts/20220720","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"JavaScript 解构赋值详解","description":"","navigation":{"title":"JavaScript 解构赋值详解","description":"解构赋值（Destructuring Assignment）是 ES6 引入的语法特性，允许通过模式匹配的方式从数组或对象中提取值，并赋值给对应的变量。可以显著简化从数据结构中获取值的操作。","date":"2022-07-20 16:40:30","account":"lpj","tags":["es6","解构赋值"]},"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"什么是解构赋值"},"children":[{"type":"text","value":"什么是解构赋值？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"解构赋值（Destructuring Assignment）是 ES6 引入的语法特性，允许通过"},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"模式匹配"}]},{"type":"text","value":"的方式从数组或对象中提取值，并赋值给对应的变量。可以显著简化从数据结构中获取值的操作。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这是一个带脚注的文本"},{"type":"element","tag":"sup","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#user-content-fn-1","ariaDescribedBy":["footnote-label"],"dataFootnoteRef":"","id":"user-content-fnref-1"},"children":[{"type":"text","value":"1"}]}]}]},{"type":"element","tag":"ul","props":{"className":["contains-task-list"]},"children":[{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"checked":true,"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" 已完成任务"}]},{"type":"element","tag":"li","props":{"className":["task-list-item"]},"children":[{"type":"element","tag":"input","props":{"disabled":true,"type":"checkbox"},"children":[]},{"type":"text","value":" 未完成任务"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"print(\"Hello World\")"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"details","props":{},"children":[{"type":"element","tag":"summary","props":{},"children":[{"type":"text","value":"点击展开"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"隐藏内容在此"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"高亮需用HTML："},{"type":"element","tag":"mark","props":{},"children":[{"type":"text","value":"高亮文本"}]}]},{"type":"element","tag":"h2","props":{"id":"基础用法"},"children":[{"type":"text","value":"基础用法"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// 基础用法\nconst colors = ['红', '绿', '蓝'];\nconst [firstColor, secondColor] = colors;\nconsole.log(firstColor);  // 输出：红\nconsole.log(secondColor); // 输出：绿\n\n// 跳过元素\nconst [,, thirdColor] = colors;\nconsole.log(thirdColor);  // 输出：蓝\n\n// 默认值\nconst [a = 10, b = 20] = [1];\nconsole.log(a, b); // 输出：1 20\n\n// 交换变量\nlet x = 1, y = 2;\n[x, y] = [y, x];\nconsole.log(x, y); // 输出：2 1\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 基础用法\nconst colors = ['红', '绿', '蓝'];\nconst [firstColor, secondColor] = colors;\nconsole.log(firstColor);  // 输出：红\nconsole.log(secondColor); // 输出：绿\n\n// 跳过元素\nconst [,, thirdColor] = colors;\nconsole.log(thirdColor);  // 输出：蓝\n\n// 默认值\nconst [a = 10, b = 20] = [1];\nconsole.log(a, b); // 输出：1 20\n\n// 交换变量\nlet x = 1, y = 2;\n[x, y] = [y, x];\nconsole.log(x, y); // 输出：2 1\n"}]}]},{"type":"element","tag":"h2","props":{"id":"对象解构"},"children":[{"type":"text","value":"对象解构"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const user = {\n  name: '李华',\n  age: 25,\n  address: {\n    city: '北京',\n    postcode: '100000'\n  }\n};\n\n// 基础解构\nconst { name, age } = user;\nconsole.log(name, age); // 输出：李华 25\n\n// 别名解构\nconst { name: userName } = user;\nconsole.log(userName); // 输出：李华\n\n// 嵌套解构\nconst { address: { city } } = user;\nconsole.log(city); // 输出：北京\n\n// 默认值\nconst { gender = '男' } = user;\nconsole.log(gender); // 输出：男\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const user = {\n  name: '李华',\n  age: 25,\n  address: {\n    city: '北京',\n    postcode: '100000'\n  }\n};\n\n// 基础解构\nconst { name, age } = user;\nconsole.log(name, age); // 输出：李华 25\n\n// 别名解构\nconst { name: userName } = user;\nconsole.log(userName); // 输出：李华\n\n// 嵌套解构\nconst { address: { city } } = user;\nconsole.log(city); // 输出：北京\n\n// 默认值\nconst { gender = '男' } = user;\nconsole.log(gender); // 输出：男\n"}]}]},{"type":"element","tag":"h2","props":{"id":"高级用法"},"children":[{"type":"text","value":"高级用法"}]},{"type":"element","tag":"h3","props":{"id":"函数参数解构"},"children":[{"type":"text","value":"函数参数解构"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"// 对象参数解构\nfunction printUser({name, age = 18}) {\n  console.log(`${name}今年${age}岁`);\n}\nprintUser(user); // 输出：李华今年25岁\nprintUser({name: '王芳'}); // 输出：王芳今年18岁\n\n// 数组参数解构\nfunction getFirst([firstItem]) {\n  return firstItem;\n}\nconsole.log(getFirst(colors)); // 输出：红\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 对象参数解构\nfunction printUser({name, age = 18}) {\n  console.log(`${name}今年${age}岁`);\n}\nprintUser(user); // 输出：李华今年25岁\nprintUser({name: '王芳'}); // 输出：王芳今年18岁\n\n// 数组参数解构\nfunction getFirst([firstItem]) {\n  return firstItem;\n}\nconsole.log(getFirst(colors)); // 输出：红\n"}]}]},{"type":"element","tag":"h3","props":{"id":"混合解构"},"children":[{"type":"text","value":"混合解构"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const data = {\n  results: [\n    { id: 1, value: 'A' },\n    { id: 2, value: 'B' }\n  ]\n};\n\nconst {\n  results: [\n    { value: firstValue },\n    { value: secondValue }\n  ]\n} = data;\n\nconsole.log(firstValue, secondValue); // 输出：A B\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const data = {\n  results: [\n    { id: 1, value: 'A' },\n    { id: 2, value: 'B' }\n  ]\n};\n\nconst {\n  results: [\n    { value: firstValue },\n    { value: secondValue }\n  ]\n} = data;\n\nconsole.log(firstValue, secondValue); // 输出：A B\n"}]}]},{"type":"element","tag":"h2","props":{"id":"使用注意事项"},"children":[{"type":"text","value":"使用注意事项"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"变量声明"}]},{"type":"text","value":"：解构赋值需要配合 let/const/var 使用"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"已声明变量"}]},{"type":"text","value":"：对已存在的变量解构时需要加括号"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"let a, b;\n({a, b} = {a: 1, b: 2});\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"let a, b;\n({a, b} = {a: 1, b: 2});\n"}]}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"模式匹配"}]},{"type":"text","value":"：解构的左右两侧结构要保持一致"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"默认值生效条件"}]},{"type":"text","value":"：只有当对应值为 undefined 时默认值才会生效"}]}]},{"type":"element","tag":"h2","props":{"id":"典型应用场景"},"children":[{"type":"text","value":"典型应用场景"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"处理 API 返回的 JSON 数据"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"交换变量值"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"导入模块特定方法"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"函数返回多个值"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"function getCoords() {\n  return [12.34, 56.78];\n}\nconst [lng, lat] = getCoords();\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"function getCoords() {\n  return [12.34, 56.78];\n}\nconst [lng, lat] = getCoords();\n"}]}]},{"type":"element","tag":"section","props":{"className":["footnotes"],"dataFootnotes":""},"children":[{"type":"element","tag":"h2","props":{"className":["sr-only"],"id":"footnote-label"},"children":[{"type":"text","value":"Footnotes"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{"id":"user-content-fn-1"},"children":[{"type":"text","value":"脚注内容显示在此处 "},{"type":"element","tag":"a","props":{"href":"#user-content-fnref-1","ariaLabel":"Back to reference 1","className":["data-footnote-backref"],"dataFootnoteBackref":""},"children":[{"type":"text","value":"↩"}]}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"什么是解构赋值","depth":2,"text":"什么是解构赋值？"},{"id":"基础用法","depth":2,"text":"基础用法"},{"id":"对象解构","depth":2,"text":"对象解构"},{"id":"高级用法","depth":2,"text":"高级用法","children":[{"id":"函数参数解构","depth":3,"text":"函数参数解构"},{"id":"混合解构","depth":3,"text":"混合解构"}]},{"id":"使用注意事项","depth":2,"text":"使用注意事项"},{"id":"典型应用场景","depth":2,"text":"典型应用场景"},{"id":"footnote-label","depth":2,"text":"Footnotes"}]}},"_type":"markdown","_id":"content:posts:20220720.md","_source":"content","_file":"posts/20220720.md","_stem":"posts/20220720","_extension":"md"},{"_path":"/posts/20231205","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"vue 使用 docxtemplater 导出 word 文件","description":"docxtemplater 是一种邮件合并工具，以编程方式使用并处理条件、循环，并且可以扩展以插入任何内容（表格、html、图像）","navigation":{"title":"vue 使用 docxtemplater 导出 word 文件","description":"docxtemplater 是一种邮件合并工具，以编程方式使用并处理条件、循环，并且可以扩展以插入任何内容（表格、html、图像）","date":"2023-12-05 12:30:00","account":"lpj","tags":["docxtemplater","文件导出"]},"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"docxtemplater-导出-word"},"children":[{"type":"text","value":"docxtemplater 导出 word"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"docxtemplater 是一种邮件合并工具，以编程方式使用并处理条件、循环，并且可以扩展以插入任何内容（表格、html、图像）"}]},{"type":"element","tag":"h2","props":{"id":"一安装-docxtemplater"},"children":[{"type":"text","value":"一、安装 docxtemplater"}]},{"type":"element","tag":"pre","props":{"className":["language-cmd"],"code":"// 安装 docxtemplater\nnpm install docxtemplater pizzip  --save\n// 安装 jszip-utils\nnpm install jszip-utils --save\n// 安装 FileSaver\nnpm install file-saver --save\n// 引入处理图片的插件\nnpm install docxtemplater-image-module-free --save\n//docx-preview预览插件\nnpm i docx-preview --save\n","language":"cmd","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// 安装 docxtemplater\nnpm install docxtemplater pizzip  --save\n// 安装 jszip-utils\nnpm install jszip-utils --save\n// 安装 FileSaver\nnpm install file-saver --save\n// 引入处理图片的插件\nnpm install docxtemplater-image-module-free --save\n//docx-preview预览插件\nnpm i docx-preview --save\n"}]}]},{"type":"element","tag":"h2","props":{"id":"二docxtemplater-语法"},"children":[{"type":"text","value":"二、docxtemplater 语法"}]},{"type":"element","tag":"h3","props":{"id":"_1-单一变量使用-包含"},"children":[{"type":"text","value":"1.  单一变量使用  {}  包含"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"{\n    name: 'lisi',\n    age: 18\n}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{\n    name: 'lisi',\n    age: 18\n}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"在 word 模板文件中表示为："}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"{name}、{age}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{name}、{age}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_2-json数组格式则包裹一个循环对象"},"children":[{"type":"text","value":"2.  json数组格式，则包裹一个循环对象："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"list: [\n    {name:'lisi', class: '4-1', age:'18'},\n    {name:'wangwu', class: '4-2', age:'16'}\n]\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"list: [\n    {name:'lisi', class: '4-1', age:'18'},\n    {name:'wangwu', class: '4-2', age:'16'}\n]\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"在 word 模板文件中表示为："}]}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":"center"},"children":[{"type":"text","value":"姓名"}]},{"type":"element","tag":"th","props":{"align":"center"},"children":[{"type":"text","value":"班级"}]},{"type":"element","tag":"th","props":{"align":"center"},"children":[{"type":"text","value":"年龄"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"内容默认居左"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"内容居中"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"内容居右"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"{#list}{name}"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"{class}"}]},{"type":"element","tag":"td","props":{"align":"center"},"children":[{"type":"text","value":"{age}{/list}"}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"_3-使用图片地址"},"children":[{"type":"text","value":"3.  使用图片地址："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"{%imgUrl}\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{%imgUrl}\n"}]}]},{"type":"element","tag":"h3","props":{"id":"_4-如果多张图片地址时与循环列表一样-但必须换行"},"children":[{"type":"text","value":"4.  如果多张图片地址时，与循环列表一样, 但"},{"type":"element","tag":"em","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"必须换行"}]}]},{"type":"text","value":"："}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"{#imglist}\n    {%imgUrl}\n{/imglist} \n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"{#imglist}\n    {%imgUrl}\n{/imglist} \n"}]}]},{"type":"element","tag":"h2","props":{"id":"三封装js"},"children":[{"type":"text","value":"三、封装JS"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"outputWord.js"}]},{"type":"text","value":" 文件"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"/**\n * 导出word文档\n * \n// 安装 docxtemplater\nnpm install docxtemplater pizzip  --save\n// 安装 jszip-utils\nnpm install jszip-utils --save\n// 安装 FileSaver\nnpm install file-saver --save\n// 引入处理图片的插件\nnpm install docxtemplater-image-module-free --save\n//docx-preview预览插件\nnpm i docx-preview --save\n\n// 安装全部\nnpm install docxtemplater pizzip jszip-utils file-saver docxtemplater-image-module-free docx-preview --save\n */\nimport Docxtemplater from 'docxtemplater'\nimport ImageModule from 'docxtemplater-image-module-free'\nimport PizZip from 'pizzip'\nimport JSZipUtils from 'jszip-utils'\nimport { renderAsync } from 'docx-preview'\nimport { saveAs } from 'file-saver'\nimport * as echarts from 'echarts'\n\nlet imageMaxWidth = 640\nlet createdTime = ''\nlet imageSizeObjs = {}\n/**\n * 将base64格式的数据转为ArrayBuffer\n * @param {Object} dataURL base64格式的数据\n */\nfunction base64DataURLToArrayBuffer(dataURL) {\n    const base64Regex = /^data:image\\/(png|jpg|jpeg|svg|svg\\+xml);base64,/;\n    if (!base64Regex.test(dataURL)) {\n        return false\n    }\n    const stringBase64 = dataURL.replace(base64Regex, \"\")\n    let binaryString\n    if (typeof window !== \"undefined\") {\n        binaryString = window.atob(stringBase64)\n    } else {\n        binaryString = Buffer.from(stringBase64, \"base64\").toString(\"binary\")\n    }\n    const len = binaryString.length\n    const bytes = new Uint8Array(len)\n    for (let i = 0; i < len; i++) {\n        const ascii = binaryString.charCodeAt(i)\n        bytes[i] = ascii\n    }\n    return bytes.buffer\n}\n \n/**\n * 将图片的url路径转为base64路径\n * 可以用await等待Promise的异步返回\n * @param {Object} imgUrl 图片路径\n */\nexport const getBase64Sync = (imgUrl) => {\n    return new Promise((resolve, reject) => {\n        // 一定要设置为let，不然图片不显示\n        let image = new Image()\n        //图片地址\n        image.src = imgUrl\n        // 解决跨域问题\n        image.setAttribute(\"crossOrigin\", '*')  // 支持跨域图片\n        // image.onload为异步加载\n        image.onload = () => {\n            let canvas = document.createElement(\"canvas\")\n            const {width, height} = image\n            canvas.width = width\n            canvas.height = height\n            let context = canvas.getContext(\"2d\")\n            context.drawImage(image, 0, 0, width, height)\n            //图片后缀名\n            let ext = image.src.substring(image.src.lastIndexOf(\".\") + 1).toLowerCase()\n            //图片质量\n            let quality = 0.8\n            //转成base64\n            let dataurl = canvas.toDataURL(\"image/\" + ext, quality)\n            // 将缩放后的尺寸信息保存\n            let key = fomratKey(dataurl)\n            imageSizeObjs[key] = imageScaleSize(width, height)\n            // 解除引用\n            image = null\n            //返回\n            resolve(dataurl)\n        };\n    })\n}\n// 截取base64后25位，加key，作为imageSizeObjs的key值\nconst fomratKey = (base64Data) => {\n    const last25 = base64Data.substring(base64Data.length - 25)\n    return `${last25}`\n}\n\n// 缩放图片尺寸\nconst imageScaleSize = (w, h) => {\n    if (w > imageMaxWidth) {\n        const scale = imageMaxWidth / w\n        w *= scale\n        h *= scale\n        return([Math.ceil(w), Math.ceil(h)])\n    } else {\n        return([w, h])\n    }\n}\n \n/**\n * 将echart转为base64\n * 可以用await等待Promise的异步返回\n * @param {Object} imgUrl 图片路径\n */\nexport const chartToBase64Pic = (opt) => {\n    const {dom, bgColor = '#fff'} = opt || {}\n    return new Promise((resolve, reject) => {\n        if (!dom) {\n            console.warn('未传入echarts的dom')\n            resolve(null)\n        }\n        const echartDom = echarts.getInstanceByDom(dom)\n        const base64Str = echartDom.getDataURL({\n            type: 'png',\n            //导出的图片分辨率比例，默认为 1\n            pixelRatio: 1,\n            // 导出的图片背景色，默认使用 option 里的 backgroundColor\n            backgroundColor: bgColor\n        })\n        // 将缩放后的尺寸信息保存\n        let key = fomratKey(base64Str)\n        imageSizeObjs[key] = imageScaleSize(dom.offsetWidth, dom.offsetHeight)\n        resolve(base64Str)\n    })\n}\n\n// 获取年月日时分秒\nconst getDate = () => {\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = (now.getMonth() + 1).toString().padStart(2, '0')\n    const day = now.getDate().toString().padStart(2, '0')\n    const hour = now.getHours().toString().padStart(2, '0')\n    const minute = now.getMinutes().toString().padStart(2, '0')\n    const second = now.getSeconds().toString().padStart(2, '0')\n    return [\n        `${year}-${month}-${day} ${hour}:${minute}:${second}`,\n        `${year}年${month}月${day}日${hour}时${minute}分${second}秒`,\n        `${year}-${month}-${day}`,\n        `${year}年${month}月${day}日`\n    ]\n}\n\n/** \n * 递归所有数据，并对图片处理，返回新的对象\n * 避免污染原数据\n */\nconst deepCopyAndHandleBase64 = async (obj) => {\n    if (obj === null || typeof obj !== 'object') {\n        return obj\n    }\n    let copy = Array.isArray(obj)? [] : {}\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const val = obj[key]\n            if (val instanceof Element) {\n                // 将 echart dom 的对象转成base64\n                copy[key] = await chartToBase64Pic({dom: val})\n            } else if (typeof(val) === 'string' && val.indexOf('http') !== -1) {\n                // 将http的图片转成base64\n                copy[key] = await getBase64Sync(val)\n            } else {\n                copy[key] = await deepCopyAndHandleBase64(obj[key])\n            }\n        }\n    }\n    return copy\n}\n\n/**\n * 渲染文档\n * @param {Object} outputWordData 必填，要导出的数据列表\n * @param {Object} fileConfigInfo 选填，配置文件，内容包括\n *     @param {String} templateDocxPath 必填，模板路径\n *     @param {String} imgMaxWidth 选填，图片的最大宽度，超过按比例缩放\n *     @param {String} placeInfo 选填，页面的信息,会混入 outputWordData\n */\nexport const ExportBriefDataDocx = async (outputWordData, fileConfigInfo) => {\n    imageSizeObjs = {}\n\n    const {imgMaxWidth, placeInfo = {}, templateDocxPath} = fileConfigInfo || {}\n    // 如果有传入 imgMaxWidth \n    if (imgMaxWidth) imageMaxWidth = imgMaxWidth\n    let outData = await deepCopyAndHandleBase64(outputWordData)\n    outData = Object.assign(outData, placeInfo)\n\n    // 如果没有createdTime的对象，就创建当前时间\n    const [fullDate, fullDateCn, date, dateCn] = getDate()\n    if (!outData.createdTime) {\n        outData.createdTime = fullDate\n        createdTime = fullDate\n    } else {\n        createdTime = outData.createdTime\n    }\n    outData.fullDateCn = fullDateCn\n    outData.dateCn = dateCn\n    return new Promise((resolve) => {\n        //这里要引入处理图片的插件\n        JSZipUtils.getBinaryContent(templateDocxPath, (error, content) => {\n            if (error) {\n                console.log(error)\n            }\n        \n            let imageOpts = {\n                //图像是否居中\n                centered: true,\n                //将base64的数据转为ArrayBuffer\n                getImage: (chartId) => {\n                    return base64DataURLToArrayBuffer(chartId)\n                },\n                getSize: (img, tagValue, tagName) => {\n                    const key = fomratKey(tagValue)\n                    return imageSizeObjs[key] || []\n                }\n            }\n\n            // 创建一个JSZip实例，内容为模板的内容        \n            const zip = new PizZip(content)\n            // 创建并加载 Docxtemplater 实例对象\n            // 设置模板变量的值\n            let doc = new Docxtemplater()\n            doc.attachModule(new ImageModule(imageOpts))\n            doc.loadZip(zip)\n            doc.setData(outData)\n            try {\n                // 呈现文档，会将内部所有变量替换成值，\n                doc.render()\n            } catch (error) {\n                const e = {\n                    message: error.message,\n                    name: error.name,\n                    stack: error.stack,\n                    properties: error.properties\n                }\n                console.log('err',{ error: e })\n                // 当使用json记录时，此处抛出错误信息\n                throw error\n            }\n            // 生成一个代表Docxtemplater对象的zip文件（不是一个真实的文件，而是在内存中的表示）\n            const out = doc.getZip().generate({\n                type: 'blob',\n                mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n            })\n            resolve(out)\n        })\n    })\n}\nexport const ViewWordFile = (out, dom) => {\n    dom\n        ? renderAsync(out, dom)\n        : console.warn('dom 未定义')\n}\n\nexport const DownWordFile = (out, outFileName) => {\n    outFileName\n        ? saveAs(out, `${outFileName}(${createdTime})`)\n        : console.warn('outFileName 未定义')\n} \n\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/**\n * 导出word文档\n * \n// 安装 docxtemplater\nnpm install docxtemplater pizzip  --save\n// 安装 jszip-utils\nnpm install jszip-utils --save\n// 安装 FileSaver\nnpm install file-saver --save\n// 引入处理图片的插件\nnpm install docxtemplater-image-module-free --save\n//docx-preview预览插件\nnpm i docx-preview --save\n\n// 安装全部\nnpm install docxtemplater pizzip jszip-utils file-saver docxtemplater-image-module-free docx-preview --save\n */\nimport Docxtemplater from 'docxtemplater'\nimport ImageModule from 'docxtemplater-image-module-free'\nimport PizZip from 'pizzip'\nimport JSZipUtils from 'jszip-utils'\nimport { renderAsync } from 'docx-preview'\nimport { saveAs } from 'file-saver'\nimport * as echarts from 'echarts'\n\nlet imageMaxWidth = 640\nlet createdTime = ''\nlet imageSizeObjs = {}\n/**\n * 将base64格式的数据转为ArrayBuffer\n * @param {Object} dataURL base64格式的数据\n */\nfunction base64DataURLToArrayBuffer(dataURL) {\n    const base64Regex = /^data:image\\/(png|jpg|jpeg|svg|svg\\+xml);base64,/;\n    if (!base64Regex.test(dataURL)) {\n        return false\n    }\n    const stringBase64 = dataURL.replace(base64Regex, \"\")\n    let binaryString\n    if (typeof window !== \"undefined\") {\n        binaryString = window.atob(stringBase64)\n    } else {\n        binaryString = Buffer.from(stringBase64, \"base64\").toString(\"binary\")\n    }\n    const len = binaryString.length\n    const bytes = new Uint8Array(len)\n    for (let i = 0; i < len; i++) {\n        const ascii = binaryString.charCodeAt(i)\n        bytes[i] = ascii\n    }\n    return bytes.buffer\n}\n \n/**\n * 将图片的url路径转为base64路径\n * 可以用await等待Promise的异步返回\n * @param {Object} imgUrl 图片路径\n */\nexport const getBase64Sync = (imgUrl) => {\n    return new Promise((resolve, reject) => {\n        // 一定要设置为let，不然图片不显示\n        let image = new Image()\n        //图片地址\n        image.src = imgUrl\n        // 解决跨域问题\n        image.setAttribute(\"crossOrigin\", '*')  // 支持跨域图片\n        // image.onload为异步加载\n        image.onload = () => {\n            let canvas = document.createElement(\"canvas\")\n            const {width, height} = image\n            canvas.width = width\n            canvas.height = height\n            let context = canvas.getContext(\"2d\")\n            context.drawImage(image, 0, 0, width, height)\n            //图片后缀名\n            let ext = image.src.substring(image.src.lastIndexOf(\".\") + 1).toLowerCase()\n            //图片质量\n            let quality = 0.8\n            //转成base64\n            let dataurl = canvas.toDataURL(\"image/\" + ext, quality)\n            // 将缩放后的尺寸信息保存\n            let key = fomratKey(dataurl)\n            imageSizeObjs[key] = imageScaleSize(width, height)\n            // 解除引用\n            image = null\n            //返回\n            resolve(dataurl)\n        };\n    })\n}\n// 截取base64后25位，加key，作为imageSizeObjs的key值\nconst fomratKey = (base64Data) => {\n    const last25 = base64Data.substring(base64Data.length - 25)\n    return `${last25}`\n}\n\n// 缩放图片尺寸\nconst imageScaleSize = (w, h) => {\n    if (w > imageMaxWidth) {\n        const scale = imageMaxWidth / w\n        w *= scale\n        h *= scale\n        return([Math.ceil(w), Math.ceil(h)])\n    } else {\n        return([w, h])\n    }\n}\n \n/**\n * 将echart转为base64\n * 可以用await等待Promise的异步返回\n * @param {Object} imgUrl 图片路径\n */\nexport const chartToBase64Pic = (opt) => {\n    const {dom, bgColor = '#fff'} = opt || {}\n    return new Promise((resolve, reject) => {\n        if (!dom) {\n            console.warn('未传入echarts的dom')\n            resolve(null)\n        }\n        const echartDom = echarts.getInstanceByDom(dom)\n        const base64Str = echartDom.getDataURL({\n            type: 'png',\n            //导出的图片分辨率比例，默认为 1\n            pixelRatio: 1,\n            // 导出的图片背景色，默认使用 option 里的 backgroundColor\n            backgroundColor: bgColor\n        })\n        // 将缩放后的尺寸信息保存\n        let key = fomratKey(base64Str)\n        imageSizeObjs[key] = imageScaleSize(dom.offsetWidth, dom.offsetHeight)\n        resolve(base64Str)\n    })\n}\n\n// 获取年月日时分秒\nconst getDate = () => {\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = (now.getMonth() + 1).toString().padStart(2, '0')\n    const day = now.getDate().toString().padStart(2, '0')\n    const hour = now.getHours().toString().padStart(2, '0')\n    const minute = now.getMinutes().toString().padStart(2, '0')\n    const second = now.getSeconds().toString().padStart(2, '0')\n    return [\n        `${year}-${month}-${day} ${hour}:${minute}:${second}`,\n        `${year}年${month}月${day}日${hour}时${minute}分${second}秒`,\n        `${year}-${month}-${day}`,\n        `${year}年${month}月${day}日`\n    ]\n}\n\n/** \n * 递归所有数据，并对图片处理，返回新的对象\n * 避免污染原数据\n */\nconst deepCopyAndHandleBase64 = async (obj) => {\n    if (obj === null || typeof obj !== 'object') {\n        return obj\n    }\n    let copy = Array.isArray(obj)? [] : {}\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const val = obj[key]\n            if (val instanceof Element) {\n                // 将 echart dom 的对象转成base64\n                copy[key] = await chartToBase64Pic({dom: val})\n            } else if (typeof(val) === 'string' && val.indexOf('http') !== -1) {\n                // 将http的图片转成base64\n                copy[key] = await getBase64Sync(val)\n            } else {\n                copy[key] = await deepCopyAndHandleBase64(obj[key])\n            }\n        }\n    }\n    return copy\n}\n\n/**\n * 渲染文档\n * @param {Object} outputWordData 必填，要导出的数据列表\n * @param {Object} fileConfigInfo 选填，配置文件，内容包括\n *     @param {String} templateDocxPath 必填，模板路径\n *     @param {String} imgMaxWidth 选填，图片的最大宽度，超过按比例缩放\n *     @param {String} placeInfo 选填，页面的信息,会混入 outputWordData\n */\nexport const ExportBriefDataDocx = async (outputWordData, fileConfigInfo) => {\n    imageSizeObjs = {}\n\n    const {imgMaxWidth, placeInfo = {}, templateDocxPath} = fileConfigInfo || {}\n    // 如果有传入 imgMaxWidth \n    if (imgMaxWidth) imageMaxWidth = imgMaxWidth\n    let outData = await deepCopyAndHandleBase64(outputWordData)\n    outData = Object.assign(outData, placeInfo)\n\n    // 如果没有createdTime的对象，就创建当前时间\n    const [fullDate, fullDateCn, date, dateCn] = getDate()\n    if (!outData.createdTime) {\n        outData.createdTime = fullDate\n        createdTime = fullDate\n    } else {\n        createdTime = outData.createdTime\n    }\n    outData.fullDateCn = fullDateCn\n    outData.dateCn = dateCn\n    return new Promise((resolve) => {\n        //这里要引入处理图片的插件\n        JSZipUtils.getBinaryContent(templateDocxPath, (error, content) => {\n            if (error) {\n                console.log(error)\n            }\n        \n            let imageOpts = {\n                //图像是否居中\n                centered: true,\n                //将base64的数据转为ArrayBuffer\n                getImage: (chartId) => {\n                    return base64DataURLToArrayBuffer(chartId)\n                },\n                getSize: (img, tagValue, tagName) => {\n                    const key = fomratKey(tagValue)\n                    return imageSizeObjs[key] || []\n                }\n            }\n\n            // 创建一个JSZip实例，内容为模板的内容        \n            const zip = new PizZip(content)\n            // 创建并加载 Docxtemplater 实例对象\n            // 设置模板变量的值\n            let doc = new Docxtemplater()\n            doc.attachModule(new ImageModule(imageOpts))\n            doc.loadZip(zip)\n            doc.setData(outData)\n            try {\n                // 呈现文档，会将内部所有变量替换成值，\n                doc.render()\n            } catch (error) {\n                const e = {\n                    message: error.message,\n                    name: error.name,\n                    stack: error.stack,\n                    properties: error.properties\n                }\n                console.log('err',{ error: e })\n                // 当使用json记录时，此处抛出错误信息\n                throw error\n            }\n            // 生成一个代表Docxtemplater对象的zip文件（不是一个真实的文件，而是在内存中的表示）\n            const out = doc.getZip().generate({\n                type: 'blob',\n                mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n            })\n            resolve(out)\n        })\n    })\n}\nexport const ViewWordFile = (out, dom) => {\n    dom\n        ? renderAsync(out, dom)\n        : console.warn('dom 未定义')\n}\n\nexport const DownWordFile = (out, outFileName) => {\n    outFileName\n        ? saveAs(out, `${outFileName}(${createdTime})`)\n        : console.warn('outFileName 未定义')\n} \n\n"}]}]},{"type":"element","tag":"h2","props":{"id":"四封装vue组件"},"children":[{"type":"text","value":"四、封装vue组件"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"outputWord.vue"}]},{"type":"text","value":" 文件"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"例子使用 elementUI，可以删除相关代码"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"例子是支持 echart 图形导出，"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"需要引入 echart"}]}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"/*\n    Component: outputWord\n*/\n<template>\n    <div class=\"outputWord\" style=\"display:inline-block;\">\n        <el-button :size=\"size\" type=\"success\" icon=\"el-icon-download\" @click=\"exportWordFile\" >\n            {{title}}\n        </el-button>\n        <el-dialog\n            fullscreen\n            append-to-body\n            title=\"生成智能报告\"\n            :visible.sync=\"dialogVisible\">\n            <div ref=\"dailyContent\" style=\"height:calc(100vh - 155px); overflow: auto;\"></div>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"success\" icon=\"el-icon-download\" @click=\"download\">导出</el-button>\n                <el-button @click=\"dialogVisible = false\">关闭</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport {\n    ExportBriefDataDocx,\n    ViewWordFile,\n    DownWordFile\n} from '@/utils/methods/outputWord/outputWord.js'\n\n\nexport default {\n    props: {\n        title: {\n            default: '导出预览'\n        },\n        templateName: {\n            default: ''\n        },\n        outputWordData: {\n            type: Object,\n            default: () => null\n        },\n        outFileName: {\n            type: String,\n            default: '未定义'\n        },\n        size: {\n            type: String,\n            default: ''\n        }\n    },\n    data () {\n        return {\n            docx: null,\n            dialogVisible: false,\n            fileConfig: {\n                agjlxtj: {\n                    outFileName: \"测试word文档\",\n                    templateDocxPath: \"/测试word文档.docx\",\n                    imgMaxWidth: 750,\n                    placeInfo: {\n                        headerTitle: \"信息科技有限公司\",\n                        headerSubTitle: \"信息科技有限公司\"\n                    }\n                }\n            }\n        }   \n    },\n    mounted () {\n    },\n    methods:{\n        async exportWordFile (){\n            const fileConfigInfo = this.fileConfig[this.templateName]\n            this.docx = null\n            this.dialogVisible = true\n            this.docx = await ExportBriefDataDocx(this.outputWordData, fileConfigInfo)\n            ViewWordFile(this.docx, this.$refs.dailyContent)\n        },\n        download () {\n            DownWordFile(this.docx, this.outFileName)\n        }\n    }\n}\n</script>\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n>>> .el-dialog .el-dialog__body\n    padding 0\n</style>\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/*\n    Component: outputWord\n*/\n<template>\n    <div class=\"outputWord\" style=\"display:inline-block;\">\n        <el-button :size=\"size\" type=\"success\" icon=\"el-icon-download\" @click=\"exportWordFile\" >\n            {{title}}\n        </el-button>\n        <el-dialog\n            fullscreen\n            append-to-body\n            title=\"生成智能报告\"\n            :visible.sync=\"dialogVisible\">\n            <div ref=\"dailyContent\" style=\"height:calc(100vh - 155px); overflow: auto;\"></div>\n            <span slot=\"footer\" class=\"dialog-footer\">\n                <el-button type=\"success\" icon=\"el-icon-download\" @click=\"download\">导出</el-button>\n                <el-button @click=\"dialogVisible = false\">关闭</el-button>\n            </span>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport {\n    ExportBriefDataDocx,\n    ViewWordFile,\n    DownWordFile\n} from '@/utils/methods/outputWord/outputWord.js'\n\n\nexport default {\n    props: {\n        title: {\n            default: '导出预览'\n        },\n        templateName: {\n            default: ''\n        },\n        outputWordData: {\n            type: Object,\n            default: () => null\n        },\n        outFileName: {\n            type: String,\n            default: '未定义'\n        },\n        size: {\n            type: String,\n            default: ''\n        }\n    },\n    data () {\n        return {\n            docx: null,\n            dialogVisible: false,\n            fileConfig: {\n                agjlxtj: {\n                    outFileName: \"测试word文档\",\n                    templateDocxPath: \"/测试word文档.docx\",\n                    imgMaxWidth: 750,\n                    placeInfo: {\n                        headerTitle: \"信息科技有限公司\",\n                        headerSubTitle: \"信息科技有限公司\"\n                    }\n                }\n            }\n        }   \n    },\n    mounted () {\n    },\n    methods:{\n        async exportWordFile (){\n            const fileConfigInfo = this.fileConfig[this.templateName]\n            this.docx = null\n            this.dialogVisible = true\n            this.docx = await ExportBriefDataDocx(this.outputWordData, fileConfigInfo)\n            ViewWordFile(this.docx, this.$refs.dailyContent)\n        },\n        download () {\n            DownWordFile(this.docx, this.outFileName)\n        }\n    }\n}\n</script>\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n>>> .el-dialog .el-dialog__body\n    padding 0\n</style>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"五调用方法"},"children":[{"type":"text","value":"五、调用方法"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"index.vue"}]},{"type":"text","value":" 文件"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"/*\n    Component: index\n*/\n<template>\n    <div class=\"index\">\n        <outputWord\n            title=\"生成报表\"\n            outFileName=\"测试统计报表\"\n            templateName=\"agjlxtj\"\n            :outputWordData=\"outputWordData\"\n        />\n        <el-button style=\"margin-left: 10px;\" @click=\"getDataList\">生成数据</el-button>\n        <el-table :data=\"outputWordData.list\" border style=\"width: 100%\">\n            <el-table-column prop=\"name\" label=\"名称\" />\n            <el-table-column prop=\"value\" label=\"数量\" />\n        </el-table>\n        <div ref=\"pieChart\" style=\"width: 500px; height: 500px;\"></div>\n    </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts'\nimport outputWord from \"@/utils/methods/outputWord/outputWord.vue\"\nexport default {\n    name: \"index\",\n    components: {\n        outputWord\n    },\n    props: {},\n    data () {\n        return {\n            outputWordData: {\n                title: '测试word文档',\n                subtitle1: '统计列表',\n                subtitle2: '占比统计',\n                list: [],\n                imglist:[\n                    {\n                        imgUrl: \"https://t7.baidu.com/it/u=4198287529,2774471735&fm=193&f=GIF\"\n                    },\n                    {\n                        imgUrl: \"https://t7.baidu.com/it/u=2621658848,3952322712&fm=193&f=GIF\"\n                    }\n                ],\n                echartBase64: ''\n            }\n        }\n    },\n    mounted() {\n        this.pieChartRef = echarts.init(this.$refs.pieChart)\n        // 将要导出图形的dom赋值\n        this.outputWordData.echartBase64 = this.$refs.pieChart\n        this.getDataList()\n    },\n    methods: {\n        random (limit = 1001) {\n            return Math.floor(Math.random() * limit)\n        },\n        getDataList () {\n            const length = this.random(10) + 5\n            const list = []\n            for(let i = 0; i < length; i++) {\n                const index = i + 1\n                list.push({\n                    index, name: `person-${index}`, value: this.random()\n                })\n            }\n            this.outputWordData.list = list\n        this.drawPicChart(list)\n        },\n        drawPicChart (data) {\n            const option = {\n                tooltip: {\n                    trigger: 'item'\n                },\n                legend: {\n                    top: '5%',\n                    left: 'center'\n                },\n                series: [\n                    {\n                        name: 'Access From',\n                        type: 'pie',\n                        radius: ['40%', '70%'],\n                        avoidLabelOverlap: false,\n                        itemStyle: {\n                            borderRadius: 10,\n                            borderColor: '#fff',\n                            borderWidth: 2\n                        },\n                        label: {\n                            show: false,\n                            position: 'center'\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        data\n                    }\n                ]\n            }\n            this.pieChartRef.setOption(option)\n        }\n    }\n}\n\n</script>\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n.index\n    padding 10px\n</style>\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/*\n    Component: index\n*/\n<template>\n    <div class=\"index\">\n        <outputWord\n            title=\"生成报表\"\n            outFileName=\"测试统计报表\"\n            templateName=\"agjlxtj\"\n            :outputWordData=\"outputWordData\"\n        />\n        <el-button style=\"margin-left: 10px;\" @click=\"getDataList\">生成数据</el-button>\n        <el-table :data=\"outputWordData.list\" border style=\"width: 100%\">\n            <el-table-column prop=\"name\" label=\"名称\" />\n            <el-table-column prop=\"value\" label=\"数量\" />\n        </el-table>\n        <div ref=\"pieChart\" style=\"width: 500px; height: 500px;\"></div>\n    </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts'\nimport outputWord from \"@/utils/methods/outputWord/outputWord.vue\"\nexport default {\n    name: \"index\",\n    components: {\n        outputWord\n    },\n    props: {},\n    data () {\n        return {\n            outputWordData: {\n                title: '测试word文档',\n                subtitle1: '统计列表',\n                subtitle2: '占比统计',\n                list: [],\n                imglist:[\n                    {\n                        imgUrl: \"https://t7.baidu.com/it/u=4198287529,2774471735&fm=193&f=GIF\"\n                    },\n                    {\n                        imgUrl: \"https://t7.baidu.com/it/u=2621658848,3952322712&fm=193&f=GIF\"\n                    }\n                ],\n                echartBase64: ''\n            }\n        }\n    },\n    mounted() {\n        this.pieChartRef = echarts.init(this.$refs.pieChart)\n        // 将要导出图形的dom赋值\n        this.outputWordData.echartBase64 = this.$refs.pieChart\n        this.getDataList()\n    },\n    methods: {\n        random (limit = 1001) {\n            return Math.floor(Math.random() * limit)\n        },\n        getDataList () {\n            const length = this.random(10) + 5\n            const list = []\n            for(let i = 0; i < length; i++) {\n                const index = i + 1\n                list.push({\n                    index, name: `person-${index}`, value: this.random()\n                })\n            }\n            this.outputWordData.list = list\n        this.drawPicChart(list)\n        },\n        drawPicChart (data) {\n            const option = {\n                tooltip: {\n                    trigger: 'item'\n                },\n                legend: {\n                    top: '5%',\n                    left: 'center'\n                },\n                series: [\n                    {\n                        name: 'Access From',\n                        type: 'pie',\n                        radius: ['40%', '70%'],\n                        avoidLabelOverlap: false,\n                        itemStyle: {\n                            borderRadius: 10,\n                            borderColor: '#fff',\n                            borderWidth: 2\n                        },\n                        label: {\n                            show: false,\n                            position: 'center'\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        data\n                    }\n                ]\n            }\n            this.pieChartRef.setOption(option)\n        }\n    }\n}\n\n</script>\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n.index\n    padding 10px\n</style>\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"一安装-docxtemplater","depth":2,"text":"一、安装 docxtemplater"},{"id":"二docxtemplater-语法","depth":2,"text":"二、docxtemplater 语法","children":[{"id":"_1-单一变量使用-包含","depth":3,"text":"1.  单一变量使用  {}  包含"},{"id":"_2-json数组格式则包裹一个循环对象","depth":3,"text":"2.  json数组格式，则包裹一个循环对象："},{"id":"_3-使用图片地址","depth":3,"text":"3.  使用图片地址："},{"id":"_4-如果多张图片地址时与循环列表一样-但必须换行","depth":3,"text":"4.  如果多张图片地址时，与循环列表一样, 但必须换行："}]},{"id":"三封装js","depth":2,"text":"三、封装JS"},{"id":"四封装vue组件","depth":2,"text":"四、封装vue组件"},{"id":"五调用方法","depth":2,"text":"五、调用方法"}]}},"_type":"markdown","_id":"content:posts:20231205.md","_source":"content","_file":"posts/20231205.md","_stem":"posts/20231205","_extension":"md"},{"_path":"/posts/20231206","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"css 测试","description":"","navigation":{"title":"css 测试","description":"我们一般安装的是最新版本的 node ,但是有时候，我们又需要使用低版本的 node ,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的 node 多版本管理工具 nvm ，全称是 node.js version management ,可以在多个 node 版本之间自由切换！","date":"2021-10-10 15:40:30","account":"lpj","tags":["nvm"]},"body":{"type":"root","children":[{"type":"element","tag":"h3","props":{"id":"_2-css-测试"},"children":[{"type":"text","value":"2.  css 测试"}]},{"type":"element","tag":"pre","props":{"className":["language-css"],"code":"div.code-toolbar {\n    position: relative;\n}\n\ndiv.code-toolbar > .toolbar {\n    position: absolute;\n    z-index: 10;\n    top: .3em;\n    right: .2em;\n    transition: opacity 0.3s ease-in-out;\n    opacity: 0;\n}\n\ndiv.code-toolbar:hover > .toolbar {\n    opacity: 1;\n}\n","language":"css","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"div.code-toolbar {\n    position: relative;\n}\n\ndiv.code-toolbar > .toolbar {\n    position: absolute;\n    z-index: 10;\n    top: .3em;\n    right: .2em;\n    transition: opacity 0.3s ease-in-out;\n    opacity: 0;\n}\n\ndiv.code-toolbar:hover > .toolbar {\n    opacity: 1;\n}\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"_2-css-测试","depth":3,"text":"2.  css 测试"}]}},"_type":"markdown","_id":"content:posts:20231206.md","_source":"content","_file":"posts/20231206.md","_stem":"posts/20231206","_extension":"md"},{"_path":"/tags","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"","description":"","navigation":{"title":"tags","description":"tags"},"body":{"type":"root","children":[],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:tags:index.md","_source":"content","_file":"tags/index.md","_stem":"tags/index","_extension":"md"}],"navigation":[{"title":"index","_path":"/components","description":"index"},{"title":"home","_path":"/","description":"home"},{"title":"links","_path":"/links","description":"links"},{"title":"Posts","_path":"/posts","children":[{"title":"nvm 安装","_path":"/posts/20211010","description":"我们一般安装的是最新版本的 node ,但是有时候，我们又需要使用低版本的 node ,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的 node 多版本管理工具 nvm ，全称是 node.js version management ,可以在多个 node 版本之间自由切换！","date":"2021-10-10 15:40:30","account":"lpj","tags":["nvm"]},{"title":"前端微服务-qiankun安装与配置","_path":"/posts/20211028","description":"qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台，在经过一批线上应用的充分检验及打磨后，我们将其微前端内核抽取出来并开源，希望能同时帮助社区有类似需求的系统更方便的构建自己的微前端系统，同时也希望通过社区的帮助将 qiankun 打磨的更加成熟完善。","date":"2021-10-28 10:20:00","account":"lpj","tags":["前端微服务","乾坤"]},{"title":"前端微服务 - ifram 解决方案","_path":"/posts/20211105","description":"我们一般安装的是最新版本的 node ,但是有时候，我们又需要使用低版本的 node ,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的 node 多版本管理工具 nvm ，全称是 node.js version management ,可以在多个 node 版本之间自由切换！","date":"2021-10-28 10:20:00","account":"lpj","tags":["前端微服务","iframe"]},{"title":"JavaScript 解构赋值详解","_path":"/posts/20220720","description":"解构赋值（Destructuring Assignment）是 ES6 引入的语法特性，允许通过模式匹配的方式从数组或对象中提取值，并赋值给对应的变量。可以显著简化从数据结构中获取值的操作。","date":"2022-07-20 16:40:30","account":"lpj","tags":["es6","解构赋值"]},{"title":"vue 使用 docxtemplater 导出 word 文件","_path":"/posts/20231205","description":"docxtemplater 是一种邮件合并工具，以编程方式使用并处理条件、循环，并且可以扩展以插入任何内容（表格、html、图像）","date":"2023-12-05 12:30:00","account":"lpj","tags":["docxtemplater","文件导出"]},{"title":"css 测试","_path":"/posts/20231206","description":"我们一般安装的是最新版本的 node ,但是有时候，我们又需要使用低版本的 node ,在不借助第三方工具的情况下，我们只能卸载现有版本,安装需要的版本，这样显然很麻烦，今天就来介绍一个windows系统使用的 node 多版本管理工具 nvm ，全称是 node.js version management ,可以在多个 node 版本之间自由切换！","date":"2021-10-10 15:40:30","account":"lpj","tags":["nvm"]}]},{"title":"tags","_path":"/tags","children":[{"title":"tags","_path":"/tags","description":"tags"}],"description":"tags"}]}