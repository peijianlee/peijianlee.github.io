[{"data":1,"prerenderedAt":352},["ShallowReactive",2],{"content-query-Ae5VQEsKqt":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"navigation":10,"body":16,"_type":346,"_id":347,"_source":348,"_file":349,"_stem":350,"_extension":351},"/posts/20231205","posts",false,"","vue 使用 docxtemplater 导出 word 文件","docxtemplater 是一种邮件合并工具，以编程方式使用并处理条件、循环，并且可以扩展以插入任何内容（表格、html、图像）",{"title":8,"description":9,"date":11,"account":12,"tags":13},"2023-12-05 12:30:00","lpj",[14,15],"docxtemplater","文件导出",{"type":17,"children":18,"toc":331},"root",[19,28,33,40,53,59,66,77,86,95,101,110,118,188,194,203,221,230,236,249,258,264,275,296,305,311,322],{"type":20,"tag":21,"props":22,"children":24},"element","h1",{"id":23},"docxtemplater-导出-word",[25],{"type":26,"value":27},"text","docxtemplater 导出 word",{"type":20,"tag":29,"props":30,"children":31},"p",{},[32],{"type":26,"value":9},{"type":20,"tag":34,"props":35,"children":37},"h2",{"id":36},"一安装-docxtemplater",[38],{"type":26,"value":39},"一、安装 docxtemplater",{"type":20,"tag":41,"props":42,"children":47},"pre",{"className":43,"code":45,"language":46,"meta":7},[44],"language-cmd","// 安装 docxtemplater\nnpm install docxtemplater pizzip  --save\n// 安装 jszip-utils\nnpm install jszip-utils --save\n// 安装 FileSaver\nnpm install file-saver --save\n// 引入处理图片的插件\nnpm install docxtemplater-image-module-free --save\n//docx-preview预览插件\nnpm i docx-preview --save\n","cmd",[48],{"type":20,"tag":49,"props":50,"children":51},"code",{"__ignoreMap":7},[52],{"type":26,"value":45},{"type":20,"tag":34,"props":54,"children":56},{"id":55},"二docxtemplater-语法",[57],{"type":26,"value":58},"二、docxtemplater 语法",{"type":20,"tag":60,"props":61,"children":63},"h3",{"id":62},"_1-单一变量使用-包含",[64],{"type":26,"value":65},"1.  单一变量使用  {}  包含",{"type":20,"tag":41,"props":67,"children":72},{"className":68,"code":70,"language":71,"meta":7},[69],"language-js","{\n    name: 'lisi',\n    age: 18\n}\n","js",[73],{"type":20,"tag":49,"props":74,"children":75},{"__ignoreMap":7},[76],{"type":26,"value":70},{"type":20,"tag":29,"props":78,"children":79},{},[80],{"type":20,"tag":49,"props":81,"children":83},{"className":82},[],[84],{"type":26,"value":85},"在 word 模板文件中表示为：",{"type":20,"tag":41,"props":87,"children":90},{"className":88,"code":89,"language":71,"meta":7},[69],"{name}、{age}\n",[91],{"type":20,"tag":49,"props":92,"children":93},{"__ignoreMap":7},[94],{"type":26,"value":89},{"type":20,"tag":60,"props":96,"children":98},{"id":97},"_2-json数组格式则包裹一个循环对象",[99],{"type":26,"value":100},"2.  json数组格式，则包裹一个循环对象：",{"type":20,"tag":41,"props":102,"children":105},{"className":103,"code":104,"language":71,"meta":7},[69],"list: [\n    {name:'lisi', class: '4-1', age:'18'},\n    {name:'wangwu', class: '4-2', age:'16'}\n]\n",[106],{"type":20,"tag":49,"props":107,"children":108},{"__ignoreMap":7},[109],{"type":26,"value":104},{"type":20,"tag":29,"props":111,"children":112},{},[113],{"type":20,"tag":49,"props":114,"children":116},{"className":115},[],[117],{"type":26,"value":85},{"type":20,"tag":119,"props":120,"children":121},"table",{},[122,147],{"type":20,"tag":123,"props":124,"children":125},"thead",{},[126],{"type":20,"tag":127,"props":128,"children":129},"tr",{},[130,137,142],{"type":20,"tag":131,"props":132,"children":134},"th",{"align":133},"center",[135],{"type":26,"value":136},"姓名",{"type":20,"tag":131,"props":138,"children":139},{"align":133},[140],{"type":26,"value":141},"班级",{"type":20,"tag":131,"props":143,"children":144},{"align":133},[145],{"type":26,"value":146},"年龄",{"type":20,"tag":148,"props":149,"children":150},"tbody",{},[151,170],{"type":20,"tag":127,"props":152,"children":153},{},[154,160,165],{"type":20,"tag":155,"props":156,"children":157},"td",{"align":133},[158],{"type":26,"value":159},"内容默认居左",{"type":20,"tag":155,"props":161,"children":162},{"align":133},[163],{"type":26,"value":164},"内容居中",{"type":20,"tag":155,"props":166,"children":167},{"align":133},[168],{"type":26,"value":169},"内容居右",{"type":20,"tag":127,"props":171,"children":172},{},[173,178,183],{"type":20,"tag":155,"props":174,"children":175},{"align":133},[176],{"type":26,"value":177},"{#list}{name}",{"type":20,"tag":155,"props":179,"children":180},{"align":133},[181],{"type":26,"value":182},"{class}",{"type":20,"tag":155,"props":184,"children":185},{"align":133},[186],{"type":26,"value":187},"{age}{/list}",{"type":20,"tag":60,"props":189,"children":191},{"id":190},"_3-使用图片地址",[192],{"type":26,"value":193},"3.  使用图片地址：",{"type":20,"tag":41,"props":195,"children":198},{"className":196,"code":197,"language":71,"meta":7},[69],"{%imgUrl}\n",[199],{"type":20,"tag":49,"props":200,"children":201},{"__ignoreMap":7},[202],{"type":26,"value":197},{"type":20,"tag":60,"props":204,"children":206},{"id":205},"_4-如果多张图片地址时与循环列表一样-但必须换行",[207,209,219],{"type":26,"value":208},"4.  如果多张图片地址时，与循环列表一样, 但",{"type":20,"tag":210,"props":211,"children":212},"em",{},[213],{"type":20,"tag":214,"props":215,"children":216},"strong",{},[217],{"type":26,"value":218},"必须换行",{"type":26,"value":220},"：",{"type":20,"tag":41,"props":222,"children":225},{"className":223,"code":224,"language":71,"meta":7},[69],"{#imglist}\n    {%imgUrl}\n{/imglist} \n",[226],{"type":20,"tag":49,"props":227,"children":228},{"__ignoreMap":7},[229],{"type":26,"value":224},{"type":20,"tag":34,"props":231,"children":233},{"id":232},"三封装js",[234],{"type":26,"value":235},"三、封装JS",{"type":20,"tag":29,"props":237,"children":238},{},[239,241,247],{"type":26,"value":240},"新建 ",{"type":20,"tag":49,"props":242,"children":244},{"className":243},[],[245],{"type":26,"value":246},"outputWord.js",{"type":26,"value":248}," 文件",{"type":20,"tag":41,"props":250,"children":253},{"className":251,"code":252,"language":71,"meta":7},[69],"/**\n * 导出word文档\n * \n// 安装 docxtemplater\nnpm install docxtemplater pizzip  --save\n// 安装 jszip-utils\nnpm install jszip-utils --save\n// 安装 FileSaver\nnpm install file-saver --save\n// 引入处理图片的插件\nnpm install docxtemplater-image-module-free --save\n//docx-preview预览插件\nnpm i docx-preview --save\n\n// 安装全部\nnpm install docxtemplater pizzip jszip-utils file-saver docxtemplater-image-module-free docx-preview --save\n */\nimport Docxtemplater from 'docxtemplater'\nimport ImageModule from 'docxtemplater-image-module-free'\nimport PizZip from 'pizzip'\nimport JSZipUtils from 'jszip-utils'\nimport { renderAsync } from 'docx-preview'\nimport { saveAs } from 'file-saver'\nimport * as echarts from 'echarts'\n\nlet imageMaxWidth = 640\nlet createdTime = ''\nlet imageSizeObjs = {}\n/**\n * 将base64格式的数据转为ArrayBuffer\n * @param {Object} dataURL base64格式的数据\n */\nfunction base64DataURLToArrayBuffer(dataURL) {\n    const base64Regex = /^data:image\\/(png|jpg|jpeg|svg|svg\\+xml);base64,/;\n    if (!base64Regex.test(dataURL)) {\n        return false\n    }\n    const stringBase64 = dataURL.replace(base64Regex, \"\")\n    let binaryString\n    if (typeof window !== \"undefined\") {\n        binaryString = window.atob(stringBase64)\n    } else {\n        binaryString = Buffer.from(stringBase64, \"base64\").toString(\"binary\")\n    }\n    const len = binaryString.length\n    const bytes = new Uint8Array(len)\n    for (let i = 0; i \u003C len; i++) {\n        const ascii = binaryString.charCodeAt(i)\n        bytes[i] = ascii\n    }\n    return bytes.buffer\n}\n \n/**\n * 将图片的url路径转为base64路径\n * 可以用await等待Promise的异步返回\n * @param {Object} imgUrl 图片路径\n */\nexport const getBase64Sync = (imgUrl) => {\n    return new Promise((resolve, reject) => {\n        // 一定要设置为let，不然图片不显示\n        let image = new Image()\n        //图片地址\n        image.src = imgUrl\n        // 解决跨域问题\n        image.setAttribute(\"crossOrigin\", '*')  // 支持跨域图片\n        // image.onload为异步加载\n        image.onload = () => {\n            let canvas = document.createElement(\"canvas\")\n            const {width, height} = image\n            canvas.width = width\n            canvas.height = height\n            let context = canvas.getContext(\"2d\")\n            context.drawImage(image, 0, 0, width, height)\n            //图片后缀名\n            let ext = image.src.substring(image.src.lastIndexOf(\".\") + 1).toLowerCase()\n            //图片质量\n            let quality = 0.8\n            //转成base64\n            let dataurl = canvas.toDataURL(\"image/\" + ext, quality)\n            // 将缩放后的尺寸信息保存\n            let key = fomratKey(dataurl)\n            imageSizeObjs[key] = imageScaleSize(width, height)\n            // 解除引用\n            image = null\n            //返回\n            resolve(dataurl)\n        };\n    })\n}\n// 截取base64后25位，加key，作为imageSizeObjs的key值\nconst fomratKey = (base64Data) => {\n    const last25 = base64Data.substring(base64Data.length - 25)\n    return `${last25}`\n}\n\n// 缩放图片尺寸\nconst imageScaleSize = (w, h) => {\n    if (w > imageMaxWidth) {\n        const scale = imageMaxWidth / w\n        w *= scale\n        h *= scale\n        return([Math.ceil(w), Math.ceil(h)])\n    } else {\n        return([w, h])\n    }\n}\n \n/**\n * 将echart转为base64\n * 可以用await等待Promise的异步返回\n * @param {Object} imgUrl 图片路径\n */\nexport const chartToBase64Pic = (opt) => {\n    const {dom, bgColor = '#fff'} = opt || {}\n    return new Promise((resolve, reject) => {\n        if (!dom) {\n            console.warn('未传入echarts的dom')\n            resolve(null)\n        }\n        const echartDom = echarts.getInstanceByDom(dom)\n        const base64Str = echartDom.getDataURL({\n            type: 'png',\n            //导出的图片分辨率比例，默认为 1\n            pixelRatio: 1,\n            // 导出的图片背景色，默认使用 option 里的 backgroundColor\n            backgroundColor: bgColor\n        })\n        // 将缩放后的尺寸信息保存\n        let key = fomratKey(base64Str)\n        imageSizeObjs[key] = imageScaleSize(dom.offsetWidth, dom.offsetHeight)\n        resolve(base64Str)\n    })\n}\n\n// 获取年月日时分秒\nconst getDate = () => {\n    const now = new Date()\n    const year = now.getFullYear()\n    const month = (now.getMonth() + 1).toString().padStart(2, '0')\n    const day = now.getDate().toString().padStart(2, '0')\n    const hour = now.getHours().toString().padStart(2, '0')\n    const minute = now.getMinutes().toString().padStart(2, '0')\n    const second = now.getSeconds().toString().padStart(2, '0')\n    return [\n        `${year}-${month}-${day} ${hour}:${minute}:${second}`,\n        `${year}年${month}月${day}日${hour}时${minute}分${second}秒`,\n        `${year}-${month}-${day}`,\n        `${year}年${month}月${day}日`\n    ]\n}\n\n/** \n * 递归所有数据，并对图片处理，返回新的对象\n * 避免污染原数据\n */\nconst deepCopyAndHandleBase64 = async (obj) => {\n    if (obj === null || typeof obj !== 'object') {\n        return obj\n    }\n    let copy = Array.isArray(obj)? [] : {}\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            const val = obj[key]\n            if (val instanceof Element) {\n                // 将 echart dom 的对象转成base64\n                copy[key] = await chartToBase64Pic({dom: val})\n            } else if (typeof(val) === 'string' && val.indexOf('http') !== -1) {\n                // 将http的图片转成base64\n                copy[key] = await getBase64Sync(val)\n            } else {\n                copy[key] = await deepCopyAndHandleBase64(obj[key])\n            }\n        }\n    }\n    return copy\n}\n\n/**\n * 渲染文档\n * @param {Object} outputWordData 必填，要导出的数据列表\n * @param {Object} fileConfigInfo 选填，配置文件，内容包括\n *     @param {String} templateDocxPath 必填，模板路径\n *     @param {String} imgMaxWidth 选填，图片的最大宽度，超过按比例缩放\n *     @param {String} placeInfo 选填，页面的信息,会混入 outputWordData\n */\nexport const ExportBriefDataDocx = async (outputWordData, fileConfigInfo) => {\n    imageSizeObjs = {}\n\n    const {imgMaxWidth, placeInfo = {}, templateDocxPath} = fileConfigInfo || {}\n    // 如果有传入 imgMaxWidth \n    if (imgMaxWidth) imageMaxWidth = imgMaxWidth\n    let outData = await deepCopyAndHandleBase64(outputWordData)\n    outData = Object.assign(outData, placeInfo)\n\n    // 如果没有createdTime的对象，就创建当前时间\n    const [fullDate, fullDateCn, date, dateCn] = getDate()\n    if (!outData.createdTime) {\n        outData.createdTime = fullDate\n        createdTime = fullDate\n    } else {\n        createdTime = outData.createdTime\n    }\n    outData.fullDateCn = fullDateCn\n    outData.dateCn = dateCn\n    return new Promise((resolve) => {\n        //这里要引入处理图片的插件\n        JSZipUtils.getBinaryContent(templateDocxPath, (error, content) => {\n            if (error) {\n                console.log(error)\n            }\n        \n            let imageOpts = {\n                //图像是否居中\n                centered: true,\n                //将base64的数据转为ArrayBuffer\n                getImage: (chartId) => {\n                    return base64DataURLToArrayBuffer(chartId)\n                },\n                getSize: (img, tagValue, tagName) => {\n                    const key = fomratKey(tagValue)\n                    return imageSizeObjs[key] || []\n                }\n            }\n\n            // 创建一个JSZip实例，内容为模板的内容        \n            const zip = new PizZip(content)\n            // 创建并加载 Docxtemplater 实例对象\n            // 设置模板变量的值\n            let doc = new Docxtemplater()\n            doc.attachModule(new ImageModule(imageOpts))\n            doc.loadZip(zip)\n            doc.setData(outData)\n            try {\n                // 呈现文档，会将内部所有变量替换成值，\n                doc.render()\n            } catch (error) {\n                const e = {\n                    message: error.message,\n                    name: error.name,\n                    stack: error.stack,\n                    properties: error.properties\n                }\n                console.log('err',{ error: e })\n                // 当使用json记录时，此处抛出错误信息\n                throw error\n            }\n            // 生成一个代表Docxtemplater对象的zip文件（不是一个真实的文件，而是在内存中的表示）\n            const out = doc.getZip().generate({\n                type: 'blob',\n                mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n            })\n            resolve(out)\n        })\n    })\n}\nexport const ViewWordFile = (out, dom) => {\n    dom\n        ? renderAsync(out, dom)\n        : console.warn('dom 未定义')\n}\n\nexport const DownWordFile = (out, outFileName) => {\n    outFileName\n        ? saveAs(out, `${outFileName}(${createdTime})`)\n        : console.warn('outFileName 未定义')\n} \n\n",[254],{"type":20,"tag":49,"props":255,"children":256},{"__ignoreMap":7},[257],{"type":26,"value":252},{"type":20,"tag":34,"props":259,"children":261},{"id":260},"四封装vue组件",[262],{"type":26,"value":263},"四、封装vue组件",{"type":20,"tag":29,"props":265,"children":266},{},[267,268,274],{"type":26,"value":240},{"type":20,"tag":49,"props":269,"children":271},{"className":270},[],[272],{"type":26,"value":273},"outputWord.vue",{"type":26,"value":248},{"type":20,"tag":276,"props":277,"children":278},"ol",{},[279,285],{"type":20,"tag":280,"props":281,"children":282},"li",{},[283],{"type":26,"value":284},"例子使用 elementUI，可以删除相关代码",{"type":20,"tag":280,"props":286,"children":287},{},[288,290],{"type":26,"value":289},"例子是支持 echart 图形导出，",{"type":20,"tag":49,"props":291,"children":293},{"className":292},[],[294],{"type":26,"value":295},"需要引入 echart",{"type":20,"tag":41,"props":297,"children":300},{"className":298,"code":299,"language":71,"meta":7},[69],"/*\n    Component: outputWord\n*/\n\u003Ctemplate>\n    \u003Cdiv class=\"outputWord\" style=\"display:inline-block;\">\n        \u003Cel-button :size=\"size\" type=\"success\" icon=\"el-icon-download\" @click=\"exportWordFile\" >\n            {{title}}\n        \u003C/el-button>\n        \u003Cel-dialog\n            fullscreen\n            append-to-body\n            title=\"生成智能报告\"\n            :visible.sync=\"dialogVisible\">\n            \u003Cdiv ref=\"dailyContent\" style=\"height:calc(100vh - 155px); overflow: auto;\">\u003C/div>\n            \u003Cspan slot=\"footer\" class=\"dialog-footer\">\n                \u003Cel-button type=\"success\" icon=\"el-icon-download\" @click=\"download\">导出\u003C/el-button>\n                \u003Cel-button @click=\"dialogVisible = false\">关闭\u003C/el-button>\n            \u003C/span>\n        \u003C/el-dialog>\n    \u003C/div>\n\u003C/template>\n\n\u003Cscript>\nimport {\n    ExportBriefDataDocx,\n    ViewWordFile,\n    DownWordFile\n} from '@/utils/methods/outputWord/outputWord.js'\n\n\nexport default {\n    props: {\n        title: {\n            default: '导出预览'\n        },\n        templateName: {\n            default: ''\n        },\n        outputWordData: {\n            type: Object,\n            default: () => null\n        },\n        outFileName: {\n            type: String,\n            default: '未定义'\n        },\n        size: {\n            type: String,\n            default: ''\n        }\n    },\n    data () {\n        return {\n            docx: null,\n            dialogVisible: false,\n            fileConfig: {\n                agjlxtj: {\n                    outFileName: \"测试word文档\",\n                    templateDocxPath: \"/测试word文档.docx\",\n                    imgMaxWidth: 750,\n                    placeInfo: {\n                        headerTitle: \"信息科技有限公司\",\n                        headerSubTitle: \"信息科技有限公司\"\n                    }\n                }\n            }\n        }   \n    },\n    mounted () {\n    },\n    methods:{\n        async exportWordFile (){\n            const fileConfigInfo = this.fileConfig[this.templateName]\n            this.docx = null\n            this.dialogVisible = true\n            this.docx = await ExportBriefDataDocx(this.outputWordData, fileConfigInfo)\n            ViewWordFile(this.docx, this.$refs.dailyContent)\n        },\n        download () {\n            DownWordFile(this.docx, this.outFileName)\n        }\n    }\n}\n\u003C/script>\n\u003Cstyle scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n>>> .el-dialog .el-dialog__body\n    padding 0\n\u003C/style>\n",[301],{"type":20,"tag":49,"props":302,"children":303},{"__ignoreMap":7},[304],{"type":26,"value":299},{"type":20,"tag":34,"props":306,"children":308},{"id":307},"五调用方法",[309],{"type":26,"value":310},"五、调用方法",{"type":20,"tag":29,"props":312,"children":313},{},[314,315,321],{"type":26,"value":240},{"type":20,"tag":49,"props":316,"children":318},{"className":317},[],[319],{"type":26,"value":320},"index.vue",{"type":26,"value":248},{"type":20,"tag":41,"props":323,"children":326},{"className":324,"code":325,"language":71,"meta":7},[69],"/*\n    Component: index\n*/\n\u003Ctemplate>\n    \u003Cdiv class=\"index\">\n        \u003CoutputWord\n            title=\"生成报表\"\n            outFileName=\"测试统计报表\"\n            templateName=\"agjlxtj\"\n            :outputWordData=\"outputWordData\"\n        />\n        \u003Cel-button style=\"margin-left: 10px;\" @click=\"getDataList\">生成数据\u003C/el-button>\n        \u003Cel-table :data=\"outputWordData.list\" border style=\"width: 100%\">\n            \u003Cel-table-column prop=\"name\" label=\"名称\" />\n            \u003Cel-table-column prop=\"value\" label=\"数量\" />\n        \u003C/el-table>\n        \u003Cdiv ref=\"pieChart\" style=\"width: 500px; height: 500px;\">\u003C/div>\n    \u003C/div>\n\u003C/template>\n\n\u003Cscript>\nimport * as echarts from 'echarts'\nimport outputWord from \"@/utils/methods/outputWord/outputWord.vue\"\nexport default {\n    name: \"index\",\n    components: {\n        outputWord\n    },\n    props: {},\n    data () {\n        return {\n            outputWordData: {\n                title: '测试word文档',\n                subtitle1: '统计列表',\n                subtitle2: '占比统计',\n                list: [],\n                imglist:[\n                    {\n                        imgUrl: \"https://t7.baidu.com/it/u=4198287529,2774471735&fm=193&f=GIF\"\n                    },\n                    {\n                        imgUrl: \"https://t7.baidu.com/it/u=2621658848,3952322712&fm=193&f=GIF\"\n                    }\n                ],\n                echartBase64: ''\n            }\n        }\n    },\n    mounted() {\n        this.pieChartRef = echarts.init(this.$refs.pieChart)\n        // 将要导出图形的dom赋值\n        this.outputWordData.echartBase64 = this.$refs.pieChart\n        this.getDataList()\n    },\n    methods: {\n        random (limit = 1001) {\n            return Math.floor(Math.random() * limit)\n        },\n        getDataList () {\n            const length = this.random(10) + 5\n            const list = []\n            for(let i = 0; i \u003C length; i++) {\n                const index = i + 1\n                list.push({\n                    index, name: `person-${index}`, value: this.random()\n                })\n            }\n            this.outputWordData.list = list\n        this.drawPicChart(list)\n        },\n        drawPicChart (data) {\n            const option = {\n                tooltip: {\n                    trigger: 'item'\n                },\n                legend: {\n                    top: '5%',\n                    left: 'center'\n                },\n                series: [\n                    {\n                        name: 'Access From',\n                        type: 'pie',\n                        radius: ['40%', '70%'],\n                        avoidLabelOverlap: false,\n                        itemStyle: {\n                            borderRadius: 10,\n                            borderColor: '#fff',\n                            borderWidth: 2\n                        },\n                        label: {\n                            show: false,\n                            position: 'center'\n                        },\n                        labelLine: {\n                            show: false\n                        },\n                        data\n                    }\n                ]\n            }\n            this.pieChartRef.setOption(option)\n        }\n    }\n}\n\n\u003C/script>\n\u003Cstyle scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n.index\n    padding 10px\n\u003C/style>\n",[327],{"type":20,"tag":49,"props":328,"children":329},{"__ignoreMap":7},[330],{"type":26,"value":325},{"title":7,"searchDepth":332,"depth":332,"links":333},2,[334,335,343,344,345],{"id":36,"depth":332,"text":39},{"id":55,"depth":332,"text":58,"children":336},[337,339,340,341],{"id":62,"depth":338,"text":65},3,{"id":97,"depth":338,"text":100},{"id":190,"depth":338,"text":193},{"id":205,"depth":338,"text":342},"4.  如果多张图片地址时，与循环列表一样, 但必须换行：",{"id":232,"depth":332,"text":235},{"id":260,"depth":332,"text":263},{"id":307,"depth":332,"text":310},"markdown","content:posts:20231205.md","content","posts/20231205.md","posts/20231205","md",1745134959179]